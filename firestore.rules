rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is the owner
    function isOwner() {
      return isAuthenticated() && request.auth.uid == 'jBa71VgYp0Qz782bawa4SgjHu1l1';
    }

    // Concert entries from the form
    match /concerts/{concertId} {
      // Only owner can create concerts
      allow create: if isOwner();
      // Everyone can read concerts
      allow read: if true;
      // Only owner can update/delete concerts
      allow update, delete: if isOwner();
    }

    // Artists collection
    match /artists/{artistId} {
      // Everyone can read artists
      allow read: if true;
      // Only owner can create/update/delete artists
      allow create, update, delete: if isOwner();
    }

    // Venues collection
    match /venues/{venueId} {
      // Everyone can read venues
      allow read: if true;
      // Only owner can create/update/delete venues
      allow create, update, delete: if isOwner();
    }

    // Setlists collection
    match /setlists/{setlistId} {
      // Everyone can read setlists
      allow read: if true;
      // Only owner can create/update/delete setlists
      allow create, update, delete: if isOwner();
    }

    // Personal notes - only owner can read/write
    match /concert_notes/{concertId} {
      // Only owner can create, read, update, or delete notes
      allow create, read, update, delete: if isOwner();
    }

    // Comments - authenticated users can read and create, only comment author can delete
    match /concert_comments/{commentId} {
      // Everyone can read comments
      allow read: if true;
      // Authenticated users can create comments
      allow create: if isAuthenticated()
                    && request.resource.data.user_id == request.auth.uid
                    && request.resource.data.user_name == request.auth.token.name
                    && request.resource.data.user_photo == request.auth.token.picture;
      // Users can only delete their own comments, or owner can delete any comment
      allow delete: if isAuthenticated()
                    && (resource.data.user_id == request.auth.uid || isOwner());
      // Comments cannot be updated (no editing)
      allow update: if false;
    }

    // Pending setlist submissions - anyone can create, only owner can read/update/delete
    match /pending_setlist_submissions/{submissionId} {
      // Owner can read all submissions, or anyone can list to check for duplicates
      allow read: if isOwner();
      allow list: if true;  // Allow anyone to query for existing submissions
      // Anyone can create a submission (even anonymous users)
      allow create: if true;
      // Only owner can update status or delete submissions
      allow update, delete: if isOwner();
    }

    // Concert photos - authenticated users can create, everyone can read, uploader/owner can delete
    match /concert_photos/{photoId} {
      // Everyone can read photos
      allow read: if true;

      // Authenticated users can upload photos
      allow create: if isAuthenticated()
                    && request.resource.data.user_id == request.auth.uid
                    && request.resource.data.user_name == request.auth.token.name
                    && request.resource.data.concert_id is string
                    && request.resource.data.storage_path is string
                    && request.resource.data.download_url is string
                    && request.resource.data.uploaded_at is timestamp
                    && request.resource.data.file_size is number
                    && request.resource.data.file_type is string;

      // Users can delete their own photos, or owner can delete any photo
      allow delete: if isAuthenticated()
                    && (resource.data.user_id == request.auth.uid || isOwner());

      // Photos cannot be updated (must delete and re-upload)
      allow update: if false;
    }
  }
}
